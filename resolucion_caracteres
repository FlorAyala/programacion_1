public class resol_1 {
/*																		
Suponer que se tienen dos matrices A y B de secuencias (de caracteres digitos separados por espacios) de tamanio MAXFIL x MAXCOL (cada fila empieza y termina con caracteres espacios), 
que estan precargadas, y ademas se tiene/n el/los siguiente/s metodo/s (se supone que existe/n y esta/n implementado/s):	
																	
_un metodo que permite obtener el indice inicial de la secuencia que mas se repite de un arreglo de secuencias (de caracteres digitos separados por espacios) de tamanio MAXCOL.																		
_un metodo que retorna el indice inicial de la secuencia que tiene mas caracteres repetidos de un arreglo de secuencias (de caracteres digitos separados por espacios) de tamanio MAXCOL.																		

Se pide realizar un programa que:																		
_contenga la definicion de el/los encabezado/s de el/los metodo/s mencionado/s como preexistente/s que figura/n en el enunciado, y no realice declaraciones explícitas de las matrices y el/los arreglo/s.																		
_en cada fila de A intercambie la secuencia que mas se repite de la fila por la secuencia con mas caracteres repetidos de dicha fila en B, si entre estas dos secuencias se cumple que la primera tiene mas vocales que la segunda (la separacion previa entre secuencias debe mantenerse).																		
*/			


public class AbbateParcial{
    public static final int MAXFIL = 10;
    public static final int MAXCOL = 10;
    public static final char SEPARADOR = ' ';
    
    public static void main(String[] args){
        //declaraciones e inicializaciones...
        for(int fila = 0; fila < MAXFIL; fila++){
            intercambiarSecuencias(A[fila], B[fila]);
        }
        
    }
    
    public static void intercambiarSecuencias(char[] a, char[] b){
        int iniA = obtenerInicioSecuenciaMasRepetida(a);
        int iniB = obtenerInicioSecuenciaCaracteresMasRepetidos(b);
        
        int finA = obtenerFinSecuencia(a, iniA);
        int finB = obtenerFinSecuencia(b, iniB);

        if(tieneMasVocales(a, b, iniA, iniB, finA, finB)){
            intercambiarSecuencias(a, b, iniA, iniB, finA, finB);
        }
    }
    
    public static boolean tieneMasVocales(char[] a, char[] b, int iniA, int iniB, int finA, int finB){
        return cantVocales(a, iniA, iniB) > cantVocales(b, iniB, finB);
    }
    
    public static int cantVocales(char[] a, int ini, int fin){//debería haber estado hecho previamente al examen
        int cant = 0;
        for(int i = ini; i <= fin; i++){
            if(esVocal(a[i]))
                cant++;
        }
        return cant;
    }
    
    public static boolean esVocal(char a){//debería haber estado hecho previamente al examen
        return esVocalMayuscula(a) || esVocalMinuscula(a);
    }
    
    public static boolean esVocalMinuscula(char a){//debería haber estado hecho previamente al examen
        return  a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u';
    }
    
    public static boolean esVocalMayuscula(char a){//debería haber estado hecho previamente al examen
        return  a == 'A' || a == 'E' || a == 'I' || a == 'O' || a == 'U';
    }
    
    public static void intercambiarSecuencias(char[] a, char[] b, int iniA, int iniB, int finA, int finB){

        int tamA = finA - iniA + 1; 
        int tamB = finB - iniB + 1;
        
        hacerCorrimientos(a, b, iniA, iniB, tamA, tamB);
        
        intercambiar(a, b, iniA, finA);
      
      	//luego correr a izquierda la más chica
    }
    
    public static void intercambiar(char[] a, char[] b, int ini, int fin){ //debería haber estado hecho previamente al examen
        for(int iter = ini; iter <= fin; iter++){
            char aux = a[iter];
            a[iter] = b[iter];
            b[iter] = aux;
        }
    }
    
    public static void hacerCorrimientos(char[] a, char[] b, int finA, int finB, int tamA, int tamB){
        if(tamA > tamB){
            correrADerecha(b, finB, tamA - tamB);
        } else if(tamA < tamB){
            correrADerecha(a, finA, tamB - tamA);
        }
    }
    
    public static void correrADerecha(char a[], int ini, int cant){//debería haber estado hecho previo al examen
        for(int veces = cant; veces > 0; veces--)
            for(int i = MAXCOL -1; i > ini; i--){
                a[i] = a[i - 1];
            }
    }
    
    public static int obtenerFinSecuencia(char[] a, int i){ //debería haber estado hecho previo al examen
        int iterador = i;
        while(iterador < MAXCOL && a[iterador] != SEPARADOR){
            iterador++;
        }
        return iterador - 1;
    }
    
    public static int obtenerInicioSecuenciaMasRepetida(char[] fil){/*...*/} //provisto
    public static int obtenerInicioSecuenciaCaracteresMasRepetidos(char[] fil){/*...*/} //provisto
}
