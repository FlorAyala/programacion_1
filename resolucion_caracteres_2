/*
  Suponer que se tienen dos matrices A y B de secuencias (de caracteres letras minusculas separados por espacios) 
  de tamanio MAXFIL x MAXCOL (cada fila empieza y termina con caracteres espacios), que estan precargadas, y ademas se tiene/n el/los siguiente/s metodo/s (se supone que existe/n y esta/n implementado/s):

  _un metodo que retorna el indice inicial de la secuencia que tiene mas caracteres repetidos de un arreglo de secuencias (de caracteres letras minusculas separados por espacios) 
  de tamanio MAXCOL (que empieza y termina con espacios).

  _un metodo que permite obtener el indice inicial de la secuencia que le sigue a la secuencia central (central porque justo al medio del arreglo esta parte de esa secuencia) 
  de un arreglo de secuencias (de caracteres letras minusculas separados por espacios) de tamanio MAXCOL (que empieza y termina con espacios).

  Se pide realizar un programa completo que (sin utilizar arreglos o matrices auxiliares extras a las mencionadas, ni realizar declaraciones explícitas de las matrices):
      _contenga la definicion de el/los encabezado/s de el/los metodo/s mencionado/s como preexistente/s que figura/n en el enunciado (excepto los de carga de datos en matrices, que solamente se invocan).
      _para cada fila de A elimine la secuencia con mas caracteres repetidos de la fila, si esta tiene cantidad par de vocales y ademas es igual a la secuencia que le sigue
          a la secuencia central de dicha fila en B.
  */


class AbdalaParcial {

  public static final int MAXFIL = 10;
  public static final int MAXCOL = 10;
  public static final char SEPARADOR = ' ';

  public static void main(String[] args) {
    //declaraciones e inicializaciones...
    for(int f = 0; f < MAXFIL; f++){
      eliminarSecuencias(matA[f], matB[f]);
    }

  }

  public static void eliminarSecuencias(char [] filaA, char [] filaB){
    int inicioSecuenciaABorrar = obtenerInicioSecuenciaConMasCaracteresRepetidos(filaA);
    int finSecuenciaABorrar = obtenerFinSecuencia(filaA, inicioSecuenciaABorrar);

    int inicioSecuenciaSiguienteACentral = obtenerInicioSecuenciaSiguienteACentral(filaB);
    int finSecuenciaSiguienteACentral = obtenerFinSecuencia(filaB, inicioSecuenciaSiguienteACentral);

    if(cantVocalesPar(filaA, inicioSecuenciaABorrar, finSecuenciaABorrar) && 
       esIgual(filaA, inicioSecuenciaABorrar, finSecuenciaABorrar, filaB, inicioSecuenciaSiguienteACentral, finSecuenciaSiguienteACentral)){
      eliminarSecuencia(filaA, inicioSecuenciaABorrar, finSecuenciaABorrar);
    }
  }
  
  
  public static void eliminarSecuencia(char[] fila, int ini, int fin){ //debería haber estado hecho previo al examen
    int veces = fin - ini + 1;
    while(veces > 0){
      correrAIzquierda(fila, ini, fin);
      veces--;
    }
  }
  
  public static void correrAIzquierda(char[] fila, int ini, int fin){ //debería haber estado hecho previo al examen
    for(int i = ini; i <= fin; i++){
      fila[i] = fila[i+1];
    }
  }
  
  public static boolean esIgual(char[] filaA, int iniA, int finA, char[] filaB, int iniB, int finB){ //debería haber estado hecho previo al examen
    if(finA - iniA != finB - iniB)
      return false;

    boolean igual = true;
    int iteradorA = iniA;
    int iteradorB = iniB;

    while(iteradorA <= finA && igual){
      igual = filaA[iteradorA] == filaB[iteradorB];
      iteradorA++;
      iteradorB++;
    }
    return igual;
  }
  
  
  public static int obtenerFinSecuencia(char[] a, int i){ //debería haber estado hecho previo al examen
    int iterador = i;
    while(iterador < MAXCOL && a[iterador] != SEPARADOR){
      iterador++;
    }
    return iterador - 1;
  }

  public static boolean cantVocalesPar(char[] fila, int ini, int fin){ //debería haber estado hecho previo al examen
    int cant = 0;
    for(int i = ini; i <= fin; i++){
      if(esVocal(fila[i]))
        cant++;
    }

    return cant % 2 == 0;
  }  

  public static boolean esVocal(char a){//debería haber estado hecho previamente al examen
    return esVocalMayuscula(a) || esVocalMinuscula(a);
  }

  public static boolean esVocalMinuscula(char a){//debería haber estado hecho previamente al examen
    return  a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u';
  }

  public static boolean esVocalMayuscula(char a){//debería haber estado hecho previamente al examen
    return  a == 'A' || a == 'E' || a == 'I' || a == 'O' || a == 'U';
  }

  public static int obtenerInicioSecuenciaSiguienteACentral(char [] arr){ /*...*/ } //provisto
  public static int obtenerInicioSecuenciaConMasCaracteresRepetidos(char [] arr){ /*...*/ } //provisto
}

