/*
Suponer que se tienen dos matrices A y B de secuencias (de caracteres letras minusculas separados por espacios) de tamanio MAXFIL x MAXCOL 
(cada fila empieza y termina con caracteres espacios), que estan precargadas, y ademas se tiene/n el/los siguiente/s metodo/s (se supone que existe/n y esta/n implementado/s):
  _un metodo que retorna el indice inicial de la secuencia cuya cantidad de vocales es la mayor de todas 
  de un arreglo de secuencias (de caracteres letras minusculas separados por espacios) de tamanio MAXCOL (que empieza y termina con espacios).

Se pide realizar un programa completo que (sin utilizar arreglos o matrices auxiliares extras a las mencionadas, ni realizar declaraciones explícitas de las matrices):
	_contenga la definicion de el/los encabezado/s de el/los metodo/s mencionado/s como preexistente/s que figura/n en el enunciado (excepto los de carga de datos en matrices, que solamente se invocan).
    _en cada fila de A inserte al final de cada secuencia que tiene mas de 5 vocales, la secuencia con mas vocales que se encuentra de dicha fila en B.
*/

class AlexanderParcial {

  public static final int MAXFIL = 10;
  public static final int MAXCOL = 10;
  public static final char SEPARADOR = ' ';
  public static final int MINVOCALES = 5;

  public static void main(String[] args){
    //declaraciones e inicializaciones...
    for(int fila = 0; fila < MAXFIL; fila++){
      insertarSecuencias(A[fila], B[fila]);
    }

  }

  public static void insertarSecuencias(char[] a, char[] b){
    int ini = 0;
    int fin = 0;

    while(ini < MAXCOL){
      ini = obtenerInicioSec(a, fin + 1);
      if(ini < MAXCOL){
        fin = obtenerFinSecuencia(a, ini);
        if(superaMinVocales(a, ini, fin)){
          insertarSecuencia(a, b, fin);
        }
        fin = obtenerFinSecuencia(a, ini);

      }
    }
  }

  public static void insertarSecuencia(char[] a, char[] b, int desde){
    int inicioSecuenciaConMasVocales = obtenerInicioSecuenciaConMasVocales(b);
    int finSecuenciaConMasVocales = obtenerFinSecuencia(b, inicioSecuenciaConMasVocales);

    correrADerecha(a, desde, finSecuenciaConMasVocales - inicioSecuenciaConMasVocales + 1);
    copiar(a, b, desde, inicioSecuenciaConMasVocales, finSecuenciaConMasVocales);
  }

  public static void copiar (char[] origen, char[] destino, int iniOrigen, int iniDestino, int finDestino){ //debería haber estado hecho previamente al examen
    int cant = finDestino - iniDestino + 1;
    for(int i = 0; i < cant; i++){
      destino[iniDestino + i] = origen[iniOrigen + i];
    }
  }

  public static void correrADerecha(char a[], int ini, int cant){//debería haber estado hecho previo al examen
    for(int veces = cant; veces > 0; veces --)
      for(int i = MAXCOL -1; i > ini; i--){
        a[i] = a[i - 1];
      }
  }

  public static int obtenerInicioSec(char[] fila, int ini){ //debería haber estado hecho previamente al examen
    int iterador = ini;
    while(iterador < MAXCOL && fila[iterador] == SEPARADOR){
      iterador++;
    }
    return iterador;
  }

  public static int obtenerFinSecuencia(char[] fila, int ini){ //debería haber estado hecho previamente al examen
    int iterador = ini; 
    while(iterador < MAXCOL && fila[iterador] != SEPARADOR){
      iterador++;
    }
    return iterador - 1;
  }

  public static boolean superaMinVocales(char[] a, int ini, int fin){
    boolean supera = false;
    int cantVocales = 0;
    int iterador = ini;
    while(iterador <= fin && !supera){
      if(esVocal(a[iterador])){
        cantVocales++;
        supera = cantVocales > MINVOCALES;
      }
    }
  }

  public static boolean esVocal(char a){//debería haber estado hecho previamente al examen
    return esVocalMayuscula(a) || esVocalMinuscula(a);
  }

  public static boolean esVocalMinuscula(char a){//debería haber estado hecho previamente al examen
    return  a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u';
  }

  public static boolean esVocalMayuscula(char a){//debería haber estado hecho previamente al examen
    return  a == 'A' || a == 'E' || a == 'I' || a == 'O' || a == 'U';
  }

  public static int obtenerInicioSecuenciaConMasVocales(char[] arr){/*...*/} //provisto



}
